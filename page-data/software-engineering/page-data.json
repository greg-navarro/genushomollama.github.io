{"componentChunkName":"component---src-pages-software-engineering-index-js","path":"/software-engineering/","result":{"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"Automated Peer-to-peer File Sharing Application","subtitle":"A peer-to-peer file sharing program for simple SOHO LANs. It is written in python, and uses only low-level socket calls in all connections."},"id":"fede06b0-33b9-53b7-ae66-f464898318d8","slug":"p2p-file-sharer/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Automated Peer-to-peer File Sharing Application\",\n  \"subtitle\": \"A peer-to-peer file sharing program for simple SOHO LANs. It is written in python, and uses only low-level socket calls in all connections.\",\n  \"link\": \"http://www.gregnavarro.com/maps-project/\",\n  \"image\": \"./demo.gif\",\n  \"image_alt\": \"The program is run in a terminal emulator with verbose logging.\",\n  \"type\": \"project\",\n  \"project_type\": \"software engineering\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    className: \"subtitle\"\n  }, \"\\\"This program is a peer-to-peer file sharing program for simple SOHO LANs.\", mdx(\"br\", null), \" It is written in python, and uses only low-level socket calls in all connections.\"), mdx(\"div\", {\n    className: \"media-container\"\n  }, mdx(\"div\", {\n    className: \"media\"\n  }, mdx(\"video\", {\n    src: \"https://gregnavarros3buckets.s3.us-west-1.amazonaws.com/demos/p2p-file-sharing.mov\",\n    autoPlay: true,\n    playsInline: true,\n    muted: true,\n    loop: true\n  })), mdx(\"h4\", {\n    className: \"media-description\"\n  }, \"Explanation of what is transpiring in the media will go here\")), mdx(\"div\", {\n    className: \"description\"\n  }, mdx(\"h3\", null, \"How to use\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"clone project\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"optional: \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make a directory within '/Shared', the name should be the reachable ip address of of the host (as in an ipv4 address either obtained from a DHCP lease or from the host itself, i.e. APIPA), a resolvable hostname or alias can also serve this purpose. \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, if the address of the local host is 192.168.0.112 then the operator could issue the command\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mkdir Shared/192.168.0.112\"), \" \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The operator can put any files they wish to share with other peers on the network in this directory. \")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Note: if you choose to skip this step the program will make the appropriate directory at runtime. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run the program with the following command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python3 Main.py\"), \" \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The program will prompt you to enter the command exit to terminate the program. In the current iteration of this project terminating the program without entering the exit command may very well break the overlay network, in which case the program would have to simply be restarted on some of the hosts belonging to the network (otherwise, no harm done).\"))), mdx(\"h3\", null, \"Next steps:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use the Kademlia DHT to perform optimization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"include functionality for pushing file updates and file delete notifications to other peers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use a ThreadPoolExecutor to speed up the process of downloading many files simultaneously\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"display the progress of current downloads to the operator via animated progress bars\")), mdx(\"h3\", null, \"Bugs and current issues\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Calls to decode() fail when handling multimedia objects, damaging the contents of those received files, functionality must be added to handle encodings involving non utf-8 characters. This results in some distortion in .png images that have been downloaded.\")), mdx(\"p\", {\n    align: \"center\"\n  }, \"  \", mdx(\"img\", {\n    src: \"https://github.com/genushomollama/327p2pfilesharing/blob/main/multimedia_bug.png?raw=true\"\n  }), \"  \"), mdx(\"h3\", null, \"How it works\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Network Architecture\")), mdx(\"p\", {\n    align: \"center\"\n  }, \"  \", mdx(\"img\", {\n    src: \"https://raw.githubusercontent.com/genushomollama/327p2pfilesharing/main/overlay.png\"\n  }), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"each host is a node in a doubly linked list \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"each node has a unique ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the node with an ID of 0 is responsible for admitting new nodes into the network\")))), mdx(\"h3\", null, \"Program Structure\"), mdx(\"p\", null, \"Three or more threads of execution are taking place most of the time in this program. The most important are Main, ClientThread, and ServerThread.\"), mdx(\"p\", {\n    align: \"center\"\n  }, \"  \", mdx(\"img\", {\n    src: \"https://raw.githubusercontent.com/genushomollama/327p2pfilesharing/main/threads.png\"\n  }), \"  \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Main:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Searches ARP table for other peers on network, contacts each host until a peer is found, in the case no peers are found a new overlay network is started in which this host will have the id of 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Launches ServerThread\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Launches ClientThread\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Waits for user to enter 'exit' at the command line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After the user has indicated the program should close, flags are set in both ClientThread and ServerThread that instruct them to finish the jobs they are currently doing, and then terminate gracefully.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once ClientThread and ServerThread have terminated then Main terminates as well.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ServerThread:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the start() method of ServerThread is invoked by the Main, ServerThread enters into a loop in the function run() wherein it initiates a socket to listen for and accept incoming connections from peers. When a connection is accepted it handed to a new thread which runs the method ServerThread.server() concurrently. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The thread running ServerThread.server() handles requests from peers, it serves the following types of request from other peers:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a JOIN request from a node asking to join the overlay\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an UPDATE request from a node asking us to update our references to the last/next nodes \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a DECREMENT request instructing our host to decrement our NodeID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a MANIFEST request asking our host to provide a listing of our current shared files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a FILE request asking our host to serve a given file\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ClientThread:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the start() method of ClientThread is invoked by the Main, ClientThread enters into a loop that does the following\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a request is made to previous node in the overlay (in the circular doubly linked-list) for the listing of all files and directories in their '/Shared' directory, we call this the MANIFEST\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for each file that the previous node has that this host does not, requests are made iteratively to other peers to download these files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"each downloaded file is added to our MANIFEST, ServerThread this will the updated Manifest to the next peer in our overlay when they request it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the thread will sleep for some period of time \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if the flag to terminate has not been set then the loop will run again\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once Main has signaled the ClientThread to terminate it will send messages to it's neighbors informing them that it is leaving the overlay, those nodes will then update their pointer references to reflect that.\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"},{"frontmatter":{"title":"Ephemeral Chat App","subtitle":"A full stack web application capable of connecting an arbitrary number of users through a real time chat room."},"id":"85bbc75b-80b0-5be3-b546-a587c62137f9","slug":"ephemeral-chat-app/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Ephemeral Chat App\",\n  \"subtitle\": \"A full stack web application capable of connecting an arbitrary number of users through a real time chat room.\",\n  \"link\": \"http://www.gregnavarro.com/maps-project/\",\n  \"image\": \"./demo.gif\",\n  \"image_alt\": \"Users exchange message in the chat app.\",\n  \"type\": \"project\",\n  \"project_type\": \"web development, software engineering\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    className: \"subtitle\"\n  }, \"A full stack web application comprising a back end server and a web browser client capable of connecting an arbitrary number of users through a real time chat room.\"), mdx(\"div\", {\n    className: \"media-container\"\n  }, mdx(\"div\", {\n    className: \"media\"\n  }, mdx(\"video\", {\n    src: \"https://gregnavarros3buckets.s3.us-west-1.amazonaws.com/demos/ephemeral-chat-app-1.mov\",\n    autoPlay: true,\n    playsInline: true,\n    muted: true,\n    loop: true\n  })), mdx(\"h4\", {\n    className: \"media-description\"\n  }, \"Explanation of what is transpiring in the media will go here\")), mdx(\"div\", {\n    className: \"description\"\n  }, mdx(\"h3\", null, \"About\"), mdx(\"p\", null, \"The Ephemeral Chat App is a simple web app that can connect as many users as can be subscribed to a single server via an open HTTP connection.\"), mdx(\"br\", null), mdx(\"p\", null, \"This project is optimized through implementation of the Server Sent Events api, which uses a 'kept-alive' HTTP connection to reduce unnecessary network traffic and improve client response times through adoption of a simplex (as opposed to full-duplex) model.\"), mdx(\"h3\", null, \"Topics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Networking & Asynchronous Programming\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server Sent Events\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cross-origin Networking\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React.js\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},{"frontmatter":{"title":"VR Aim Trainer","subtitle":"A virtual reality game consisting of a series of challenges designed to improve a players accuracy, speed and reaction time"},"id":"3a9cc555-cd0b-56e4-880b-91db2a7659bc","slug":"vr-aim-trainer/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"VR Aim Trainer\",\n  \"subtitle\": \"A virtual reality game consisting of a series of challenges designed to improve a players accuracy, speed and reaction time\",\n  \"link\": \"http://www.gregnavarro.com/maps-project/\",\n  \"image\": \"./demo.gif\",\n  \"image_alt\": \"Shooting some targets in the game.\",\n  \"type\": \"project\",\n  \"project_type\": \"software engineering, misc\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    className: \"subtitle\"\n  }, \"A virtual reality game consisting of a series of challenges designed to improve a players accuracy, speed and reaction time\"), mdx(\"div\", {\n    className: \"media-container\"\n  }, mdx(\"div\", {\n    className: \"media\"\n  }, mdx(\"video\", {\n    src: \"https://gregnavarros3buckets.s3.us-west-1.amazonaws.com/demos/src.mov\",\n    autoPlay: true,\n    playsInline: true,\n    muted: true,\n    loop: true\n  })), mdx(\"h4\", {\n    className: \"media-description\"\n  }, \"Explanation of what is transpiring in the media will go here\")), mdx(\"div\", {\n    className: \"description\"\n  }, mdx(\"h3\", null, \"About\"), mdx(\"p\", null, \"VR Aim Trainer is a Unity project designed to help users practice their game skills in a friendly environment. \"), mdx(\"br\", null), mdx(\"p\", null, \"The project will allow users to track their progression over time and see visible improvements in their aim, reflex, and timing.\"), mdx(\"br\", null), mdx(\"h3\", null, \"Topics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Game Design & Development\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C#\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unity Engine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blender\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"pageContext":{}},"staticQueryHashes":["3159585216"]}